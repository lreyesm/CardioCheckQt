#include "mainwindow.h"
#include "ui_mainwindow.h"

const uint32_t crc32_tab[] = {
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
    0xe963a535, 0x9e6495a3,	0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
    0xf3b97148, 0x84be41de,	0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,	0x14015c4f, 0x63066cd9,
    0xfa0f3d63, 0x8d080df5,	0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,	0x35b5a8fa, 0x42b2986c,
    0xdbbbc9d6, 0xacbcf940,	0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,	0x76dc4190, 0x01db7106,
    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
};

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    this->setGeometry(0,0,1280,800);
    setWindowFlags(Qt::CustomizeWindowHint);

    connect(this,SIGNAL(mouse_pressed()),this,SLOT(on_drag_screen()));
    connect(this,SIGNAL(mouse_Release()),this,SLOT(on_drag_screen_released()));
    connect(this,SIGNAL(mouse_DoubleClick()),this,SLOT(on_mouse_DoubleClick()));

    bebe_object = Bebe_Data_Class("bb","mm");

    show_pantalla_paciente();

    for(int i=0; i < UART_SEND_TOTAL_SIZE; i++){
        receive_bytes[i] = 0;
    }
    x_axis_count =0;
    valid_receive_data = false;
    last_bad_receive_pos =0;
    errores = 0;
    function_value_pos=0;
    function_value_count=0;
    HR_value_pos=0;
    HR_value_count=0;

    for(int i=0;i<4;i++){

        keyData_graph_HR<<i+1;
        valueData_graph_HR<<i+1;

        keyData_graph_HR_recorded<<i+1;
        valueData_graph_HR_recorded<<i+1;
    }

    timer_graph.setInterval(16);
    QObject::connect(&timer_graph,SIGNAL(timeout()),this,SLOT(afterUpdateGraph()));

    // Busqueda de puertos serie, encuentra el PID y el VID del FTDI se procede a inicializar el puerto serie-----------------
    //------------------------------------------------------------------------------------------------------------------------
    ftdi_is_available=false;
    foreach (const QSerialPortInfo &serialPortInfo, QSerialPortInfo::availablePorts()) {
        if(serialPortInfo.hasProductIdentifier() && serialPortInfo.hasVendorIdentifier()){
            if(serialPortInfo.productIdentifier()==ftdiProductID && serialPortInfo.vendorIdentifier()==ftdiVendorID){
                ftdi_is_available=true;
                ftdi_port_name=serialPortInfo.portName();
            }
        }
    }
    //------------------------------------------------------------------------------------------------------------------------


    // Inicializacion de puerto serie y habilitacion de botones---------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------------
    ftdi_serial_port=new QSerialPort(this);

    if(ftdi_is_available){
        ui->statusBar->showMessage("Dispositivo FTDI encontrado");
        ftdi_serial_port->setPortName(ftdi_port_name);
        ftdi_serial_port->open(QSerialPort::ReadWrite);
        ftdi_serial_port->setBaudRate(QSerialPort::Baud115200);
        ftdi_serial_port->setDataBits(QSerialPort::Data8);
        ftdi_serial_port->setFlowControl(QSerialPort::NoFlowControl);
        ftdi_serial_port->setParity(QSerialPort::NoParity);
        ftdi_serial_port->setStopBits(QSerialPort::OneStop);

        char write_data[16];
        for (int i=0; i<16;++i){

            write_data[i]=INIT_PROG_ID;
        }
        ftdi_serial_port->write(write_data,16);

        ui->statusBar->showMessage("Reiniciando discovery ---------------");
    }
    else {
        ui->statusBar->showMessage("Dispositivo FTDI no encontrado");
    }
    //------------------------------------------------------------------------------------------------------------------------

    setupGraph_Oxy1();
    setupGraph_Oxy2();
    setupGraph_EKG();

    conectar_senales_de_botones();

    cargar_base_de_datos(":/base_datos_oximetria.dat"); // ficheros .dat se puede utilizar formato txt tambien

}

MainWindow::~MainWindow()
{
    if(ftdi_serial_port->isOpen())
        ftdi_serial_port->close();
    delete ui;
}

void MainWindow::conectar_senales_de_botones(){

    ////Botones de pantalla paciente--------------------------------------------------------------------------------------------------------------------------
    QObject::connect(ui->pb_pant_paciente_descartar, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_descartar()));
    QObject::connect(ui->pb_pant_paciente_test, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_test()));
    QObject::connect(ui->pb_pant_paciente_nuevo, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_nuevo()));
    QObject::connect(ui->pb_pant_paciente_base_de_datos, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_base_de_datos()));
    QObject::connect(ui->pb_pant_paciente_menu, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    QObject::connect(ui->pb_pant_paciente_menu_2, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    QObject::connect(ui->pb_pant_paciente_fecha_nacimiento, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_fecha_de_nacimiento()));
    QObject::connect(ui->pb_pant_paciente_fecha_nacimiento_2, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_fecha_de_nacimiento()));
    QObject::connect(ui->pb_pant_paciente_label_femenino, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_radioB_femenino()));
    QObject::connect(ui->pb_pant_paciente_radioB_femenino, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_radioB_femenino()));
    QObject::connect(ui->pb_pant_paciente_label_masculino, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_radioB_masculino()));
    QObject::connect(ui->pb_pant_paciente_radioB_masculino, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_radioB_masculino()));
    ////-------------------------------------------------------------------------------------------------------------------------------------------------------

    ////Botones de pantalla base de datos----------------------------------------------------------------------------------------------------------------------
    QObject::connect(ui->pb_pant_base_de_datos_nuevo, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_base_de_datos_nuevo()));
    QObject::connect(ui->pb_pant_base_de_datos_menu, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    QObject::connect(ui->pb_pant_base_de_datos_menu_2, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    ////-------------------------------------------------------------------------------------------------------------------------------------------------------


    ////Botones de pantalla menu-------------------------------------------------------------------------------------------------------------------------------
    QObject::connect(ui->pb_menu_salir, SIGNAL(leftClicked()), this, SLOT(on_pb_menu_salir()));
    QObject::connect(ui->pb_menu_salir_2, SIGNAL(leftClicked()), this, SLOT(on_pb_menu_salir()));
    QObject::connect(ui->pb_menu_acerca_de, SIGNAL(leftClicked()), this, SLOT(on_pb_menu_salir()));
    QObject::connect(ui->pb_menu_ayuda, SIGNAL(leftClicked()), this, SLOT(on_pb_menu_salir()));
    ////-------------------------------------------------------------------------------------------------------------------------------------------------------


    ////Botones de pantalla test-------------------------------------------------------------------------------------------------------------------------------
    QObject::connect(ui->pb_pant_test_atras, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_base_de_datos_nuevo()));
    QObject::connect(ui->pb_pant_test_menu, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    QObject::connect(ui->pb_pant_test_menu_2, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    QObject::connect(ui->pb_pant_test_Graficar_Iniciar, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_test_Graficar_Iniciar()));
    QObject::connect(ui->pb_pant_test_Ver_Registro_Guardar, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_test_Ver_Registro_Guardar()));
    QObject::connect(ui->pb_pant_test_ajustes, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_test_ajustes()));
    ////-------------------------------------------------------------------------------------------------------------------------------------------------------

    ////Botones de pantalla ajustes-------------------------------------------------------------------------------------------------------------------------------
    QObject::connect(ui->pb_pant_ajustes_atras, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_test()));
    QObject::connect(ui->pb_pant_ajustes_menu, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    QObject::connect(ui->pb_pant_ajustes_menu_2, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_paciente_menu()));
    QObject::connect(ui->pb_pant_ajustes_generales_Generales, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_ajustes_Generales()));
    QObject::connect(ui->pb_pant_ajustes_generales_Visualizacion, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_ajustes_Visualizacion()));
    QObject::connect(ui->pb_pant_ajustes_generales_ECG, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_ajustes_ECG()));
    QObject::connect(ui->pb_pant_ajustes_generales_Oxymetria, SIGNAL(leftClicked()), this, SLOT(on_pb_pant_ajustes_Oxymetria()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_EKG_curva, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_ECG_Curva()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_EKG_fondo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_ECG_fondo()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy1_curva, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy1_Curva()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy1_fondo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy1_fondo()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy2_curva, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy2_Curva()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy2_fondo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy2_fondo()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_EKG_curva_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_ECG_Curva()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_EKG_fondo_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_ECG_fondo()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy1_curva_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy1_Curva()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy1_fondo_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy1_fondo()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy2_curva_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy2_Curva()));
    QObject::connect(ui->pb_widget_ajustes_generales_color_Oxy2_fondo_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_ajustes_generales_color_Oxy2_fondo()));
    ////-------------------------------------------------------------------------------------------------------------------------------------------------------

    ////Botones de widget paciente datos-----------------------------------------------------------------------------------------------------------------------
    QObject::connect(ui->pb_widget_paciente_datos_Borrar_paciente, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_paciente_datos_Borrar_paciente()));
    QObject::connect(ui->pb_widget_paciente_datos_Nuevo_Test, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_paciente_datos_Nuevo_Test()));
    QObject::connect(ui->pb_widget_paciente_datos_Nuevo_Test_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_paciente_datos_Nuevo_Test()));
    QObject::connect(ui->pb_widget_paciente_datos_Ver_Registro, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_paciente_datos_Ver_Registro()));
    QObject::connect(ui->pb_widget_paciente_datos_Ver_Registro_2, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_paciente_datos_Ver_Registro()));
    //-------------------------------------------------------------------------------------------------------------------------------------------------------

    ////Botones de widget colores-----------------------------------------------------------------------------------------------------------------------
    QObject::connect(ui->pb_widget_colores_aceptar_ECG_Curva, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_aceptar_ECG_Curva()));
    QObject::connect(ui->pb_widget_colores_aceptar_ECG_fondo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_aceptar_ECG_fondo()));
    QObject::connect(ui->pb_widget_colores_aceptar_Oxy1_Curva, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_aceptar_Oxy1_Curva()));
    QObject::connect(ui->pb_widget_colores_aceptar_Oxy1_fondo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_aceptar_Oxy1_fondo()));
    QObject::connect(ui->pb_widget_colores_aceptar_Oxy2_Curva, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_aceptar_Oxy2_Curva()));
    QObject::connect(ui->pb_widget_colores_aceptar_Oxy2_fondo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_aceptar_Oxy2_fondo()));
    QObject::connect(ui->pb_widget_colores_cancelar, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_cancelar()));
    QObject::connect(ui->pb_widget_colores_amarillo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_amarillo()));
    QObject::connect(ui->pb_widget_colores_azul, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_azul()));
    QObject::connect(ui->pb_widget_colores_naranja, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_naranja()));
    QObject::connect(ui->pb_widget_colores_verde, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_verde()));
    QObject::connect(ui->pb_widget_colores_rojo, SIGNAL(leftClicked()), this, SLOT(on_pb_widget_colores_rojo()));
    //-------------------------------------------------------------------------------------------------------------------------------------------------------
}

void MainWindow::afterUpdateGraph(){


    if(keyData_graph_HR[0] >= 1600)
        customPlot_graph_EKG->xAxis->setRange(keyData_graph_HR[0]- 1600,keyData_graph_HR[0] + 400);

    for(int i=0; i < 4; i++){
        keyData_graph_HR[i]+=4;
        valueData_graph_HR[i]= function_values_graph_HR[HR_value_count+i];
    }
    HR_value_count+=4;
    if(HR_value_count >= DATA_ADC_BUFFER_SIZE){
        HR_value_count = 0;
    }
    customPlot_graph_EKG->graph(0)->addData(keyData_graph_HR, valueData_graph_HR);
    customPlot_graph_EKG->replot();

    if(x_axis_count >= 400){
        customPlot_graph_Oxy1->xAxis->setRange(x_axis_count- 400,x_axis_count + 100 );
        customPlot_graph_Oxy2->xAxis->setRange(x_axis_count- 400,x_axis_count + 100 );
    }
    //customPlot_graph_Oxy1->xAxis->autoSubTicks();
    customPlot_graph_Oxy1->graph(0)->addData(x_axis_count, function_values_graph_0[function_value_count]);
    customPlot_graph_Oxy2->graph(0)->addData(x_axis_count, function_values_graph_1[function_value_count]);
    customPlot_graph_Oxy1->replot();
    customPlot_graph_Oxy2->replot();

    function_value_count++;
    x_axis_count++;
    if(function_value_count >= DATA_FUNCTION_SIZE){
        function_value_count=0;
    }
}

void MainWindow::on_drag_screen(){

    if(isFullScreen()){
        if(QApplication::mouseButtons()==Qt::RightButton){

            if(!ui->widget_menu->isHidden()){
                ui->widget_menu->hide();
                return;
            }
        }
        return;
    }
    ui->statusBar->showMessage("Moviendo");
    if(QApplication::mouseButtons()==Qt::LeftButton){

        if(!ui->widget_menu->isHidden()){
            ui->widget_menu->hide();
        }
        if(!ui->widget_pantalla_ajustes_widget_colores->isHidden()){
            ui->widget_pantalla_ajustes_widget_colores->hide();
        }

        ui->statusBar->showMessage("start");
        start_moving_screen.start(10);
        init_pos_x = (QWidget::mapFromGlobal(QCursor::pos())).x();
        init_pos_y = (QWidget::mapFromGlobal(QCursor::pos())).y();
    }
    else if(QApplication::mouseButtons()==Qt::RightButton){

    }
}

void MainWindow::on_start_moving_screen_timeout(){

    int x_pos = (int)this->pos().x()+((QWidget::mapFromGlobal(QCursor::pos())).x() - init_pos_x);
    int y_pos = (int)this->pos().y()+((QWidget::mapFromGlobal(QCursor::pos())).y() - init_pos_y);
    x_pos = (x_pos < 0)?0:x_pos;
    y_pos = (y_pos < 0)?0:y_pos;

    x_pos = (x_pos > QApplication::desktop()->width()-100)?QApplication::desktop()->width()-100:x_pos;
    y_pos = (y_pos > QApplication::desktop()->height()-180)?QApplication::desktop()->height()-180:y_pos;

    this->move(x_pos,y_pos);

    init_pos_x = (QWidget::mapFromGlobal(QCursor::pos())).x();
    init_pos_y = (QWidget::mapFromGlobal(QCursor::pos())).y();
}

void MainWindow::on_start_scrolling_screen_ajustes_timeout(){

    int y_pos = (int)ui->widget_pantalla_ajustes->pos().y()+((QWidget::mapFromGlobal(QCursor::pos())).y() - init_pos_y);
    y_pos = (y_pos > 0)?0:y_pos;  ///limites para pantalla de ajustes
    y_pos = (y_pos < delta_y_constant_scrolling_ajustes)?delta_y_constant_scrolling_ajustes:y_pos;  ///si haces sroll en otras pantallas modificar esto

    ui->widget_pantalla_ajustes->move(ui->widget_pantalla_ajustes->pos().x(),y_pos);

    init_pos_y = (QWidget::mapFromGlobal(QCursor::pos())).y();
}

void MainWindow::on_drag_screen_released()
{
    if(isFullScreen()){

        return;
    }
    start_moving_screen.stop();
    init_pos_x = 0;
    init_pos_y = 0;
    //current_win_Pos = QPoint(this->pos().x()-200,this->pos().y()-200);
}

void MainWindow::on_mouse_DoubleClick()
{
    if(!ui->widget_menu->isHidden()){
        ui->widget_menu->hide();
        return;
    }
}



void MainWindow::readSerial()
{

    QByteArray serialData = ftdi_serial_port->readAll();

    qint64 bytes_size = serialData.size();

    for(int i=0; i < bytes_size; i++){ //el elemento i = serialData.size() no existe y da error al correr

        receive_bytes[i + last_bad_receive_pos] = serialData.at(i);
        //ui->statusBar->showMessage(QString("last_bad_receive_pos  -> ")+QString::number(last_bad_receive_pos));
    }
    last_bad_receive_pos += bytes_size;

    check_message(bytes_size);

    if(valid_receive_data){

        memcpy( &function_values_graph_0[function_value_pos], &receive_bytes[DATA_GRAPH_FT_INIT_BUFFER_POS], FUNCTION_BUFFER_SIZE);
        memcpy( &function_values_graph_1[function_value_pos], &receive_bytes[DATA_GRAPH_FT_2_INIT_BUFFER_POS], FUNCTION_BUFFER_SIZE);
        memcpy( &function_values_graph_HR[HR_value_pos], &receive_bytes[DATA_GRAPH_HR_INIT_BUFFER_POS], ADC_BUFFER_SIZE);

        function_value_pos+=FUNCTION_BUFFER_SIZE;
        HR_value_pos+=ADC_BUFFER_SIZE;

        if(function_value_pos >=DATA_FUNCTION_SIZE){
            function_value_pos=0;
            HR_value_pos=0;
            primera_vuelta=false;
        }

        SPO2_bebe_value_average_OXY1 = receive_bytes[SPO2_BUFFER_OXY1_POS];
        SPO2_bebe_value_average_OXY2 = receive_bytes[SPO2_BUFFER_OXY2_POS];

        beats_per_minute_value_average_OXY1 = receive_bytes[BPM_BUFFER_OXY1_POS+1];  //HIGH
        beats_per_minute_value_average_OXY1 = beats_per_minute_value_average_OXY1<<8;              //LOW
        beats_per_minute_value_average_OXY1 = beats_per_minute_value_average_OXY1|(receive_bytes[BPM_BUFFER_OXY1_POS] & 0x0FF);

        beats_per_minute_value_average_OXY2 = receive_bytes[BPM_BUFFER_OXY2_POS+1];
        beats_per_minute_value_average_OXY2 = beats_per_minute_value_average_OXY2<<8;              //LOW
        beats_per_minute_value_average_OXY2 = beats_per_minute_value_average_OXY2|(receive_bytes[BPM_BUFFER_OXY2_POS] & 0x0FF);

        PI_value_average_OXY1 = receive_bytes[PI_BUFFER_OXY1_POS+1];
        PI_value_average_OXY1 = PI_value_average_OXY1<<8;              //LOW
        PI_value_average_OXY1 = PI_value_average_OXY1|(receive_bytes[PI_BUFFER_OXY1_POS] & 0x0FF);

        PI_value_average_OXY2 = receive_bytes[PI_BUFFER_OXY2_POS+1];
        PI_value_average_OXY2 = PI_value_average_OXY2<<8;              //LOW
        PI_value_average_OXY2 = PI_value_average_OXY2|(receive_bytes[PI_BUFFER_OXY2_POS] & 0x0FF);


        ui->l_HR_ECG->setText(QString::number(50));
        ui->l_HR_Oxy1->setText(QString::number(beats_per_minute_value_average_OXY1));
        ui->l_HR_Oxy2->setText(QString::number(beats_per_minute_value_average_OXY2));

        ui->l_SpO2_Oxy1->setText(QString::number(SPO2_bebe_value_average_OXY1)+"%");
        ui->l_SpO2_Oxy2->setText(QString::number(SPO2_bebe_value_average_OXY2)+"%");

        ui->l_PI_Oxy1->setText(QString::number((float)PI_value_average_OXY1/1000)+"%");
        ui->l_PI_Oxy2->setText(QString::number((float)PI_value_average_OXY2/1000)+"%");



        if(first_receive){
            if(function_value_pos >= FUNCTION_BUFFER_SIZE*2){
                first_receive = false;
                timer_graph.start();
            }
        }
        valid_receive_data = false;
        last_bad_receive_pos -= UART_SEND_TOTAL_SIZE;
        if(last_bad_receive_pos > 0){
            memcpy( &receive_bytes[0], &receive_bytes[UART_SEND_TOTAL_SIZE], last_bad_receive_pos);
        }
        else{
            for(int i=0; i < UART_SEND_TOTAL_SIZE; i++){
                receive_bytes[i] = 0;
            }
        }
    }
}

void MainWindow::on_pb_pant_paciente_descartar(){

    //ui->statusBar->showMessage("pb_descartar");
    ui->le_pant_paciente_Nombre->clear();
    ui->le_pant_paciente_ID->clear();
    ui->pb_pant_paciente_radioB_femenino->setStyleSheet(QStringLiteral("border-image: url(:/icons/pantalla_principal_sin_seleccion.png);"));
    ui->pb_pant_paciente_radioB_masculino->setStyleSheet(QStringLiteral("border-image: url(:/icons/pantalla_principal_sin_seleccion.png);"));
}

void MainWindow::on_pb_pant_paciente_test()
{
    show_pantalla_test();
}

void MainWindow::on_pb_pant_paciente_nuevo()
{

}

void MainWindow::on_pb_pant_paciente_base_de_datos()
{
    //ui->statusBar->showMessage("on_pb_pant_paciente_base_de_datos");
    show_pantalla_base_de_datos();
}

void MainWindow::on_pb_pant_paciente_menu()
{
    show_menu();
}

void MainWindow::show_menu()
{
    ui->widget_menu->show();
    ui->widget_menu->move(985,60);
    ui->widget_menu->raise();
}

void MainWindow::on_pb_pant_paciente_fecha_de_nacimiento()
{

}

void MainWindow::on_pb_pant_paciente_radioB_femenino()
{
    //ui->statusBar->showMessage("pb_radioB_femenino");
    ui->pb_pant_paciente_radioB_masculino->setStyleSheet(QStringLiteral("border-image: url(:/icons/pantalla_principal_sin_seleccion.png);"));
    ui->pb_pant_paciente_radioB_femenino->setStyleSheet(QStringLiteral("border-image: url(:/icons/pantalla_principal_seleccion.png);"));
}

void MainWindow::on_pb_pant_paciente_radioB_masculino()
{
    //ui->statusBar->showMessage("pb_radioB_masculino");
    ui->pb_pant_paciente_radioB_femenino->setStyleSheet(QStringLiteral("border-image: url(:/icons/pantalla_principal_sin_seleccion.png);"));
    ui->pb_pant_paciente_radioB_masculino->setStyleSheet(QStringLiteral("border-image: url(:/icons/pantalla_principal_seleccion.png);"));
}

void MainWindow::on_pb_pant_base_de_datos_nuevo()
{
    show_pantalla_paciente();

}

void MainWindow::on_pb_menu_salir()
{
    this->close();
}

void MainWindow::on_pb_menu_ayuda()
{
    this->close();
}

void MainWindow::on_pb_menu_acerca_de()
{
    this->close();
}

void MainWindow::on_pb_pant_test_Graficar_Iniciar()
{
    ui->pb_pant_test_Graficar_Iniciar->setEnabled(false);

    QObject::connect(ftdi_serial_port,SIGNAL(readyRead()),this,SLOT(readSerial()));

    char write_data[16];
    for (int i=0; i<16;++i){

        write_data[i]=INIT_SEND_ID;
    }
    ftdi_serial_port->write(write_data,16);

    ui->statusBar->showMessage("Enviando datos ---------------");
}

// Funcion de desborde de timer ----------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------
void MainWindow::on_time_out_Ver_registro(){

    if(ver_registro_activated){

        ui->l_SpO2_Oxy1->setText((QString::number((bebe_object.SPO2_bebe_value_average_OXY1)))+"%");
        ui->l_SpO2_Oxy2->setText((QString::number((bebe_object.SPO2_bebe_value_average_OXY2)))+"%");
        ui->l_PI_Oxy1->setText((QString::number((bebe_object.PI_value_average_OXY1)))+"%");
        ui->l_PI_Oxy2->setText((QString::number((bebe_object.PI_value_average_OXY2)))+"%");



        // Incremento el valor del eje x, si paso de 60 traslado el eje hacia la izquierda-------------------------
        //---------------------------------------------------------------------------------------------------------
        // ui->amplitudeWidget->replot(QCustomPlot::rpImmediate);

        quint64 HR_value_count_recorded = ver_registro_counter*4;

        if(HR_value_count_recorded >= 1600)
            customPlot_graph_EKG->xAxis->setRange(HR_value_count_recorded- 1600,HR_value_count_recorded + 400);
        //memcpy( &valueData_graph_HR[0], (double*)&function_values_graph_HR[HR_value_count], (sizeof(double))*4);

        for(int i=0; i<4; i++){
            valueData_graph_HR_recorded[i]= bebe_object.HR_data_bebe[HR_value_count_recorded+i];
        }


        customPlot_graph_EKG->graph(0)->addData(keyData_graph_HR_recorded, valueData_graph_HR_recorded);

        for(int i=0; i<4; i++){
            keyData_graph_HR_recorded[i]+=4;
        }

        if(ver_registro_counter >= 400){
            customPlot_graph_Oxy1->xAxis->setRange(ver_registro_counter- 400,ver_registro_counter + 100 );
            customPlot_graph_Oxy2->xAxis->setRange(ver_registro_counter- 400,ver_registro_counter + 100 );
        }

        customPlot_graph_Oxy1->graph(0)->addData(ver_registro_counter, bebe_object.function_0_data_bebe[ver_registro_counter]);
        customPlot_graph_Oxy2->graph(0)->addData(ver_registro_counter, bebe_object.function_1_data_bebe[ver_registro_counter]);


        customPlot_graph_EKG->replot(QCustomPlot::rpImmediate);
        customPlot_graph_Oxy1->replot(QCustomPlot::rpImmediate);
        customPlot_graph_Oxy2->replot(QCustomPlot::rpImmediate);


        ver_registro_counter++;

        if(ver_registro_counter >= bebe_object.data_function_size){

            ver_registro_counter=0;
            ver_registro_activated=false;
            timer_graph.stop();

            customPlot_graph_EKG->graph(0)->data()->clear();

            customPlot_graph_Oxy1->graph(0)->data()->clear();

            customPlot_graph_Oxy2->graph(0)->data()->clear();

            QMessageBox::information(this,"Informacion","Se ha llegado al límite máximo de muestras ",QMessageBox::Ok);

            return;
        }


    }
    else{


    }
}
//----------------------------------------------------------------------------------------------------------------------------


void MainWindow::on_pb_pant_test_Ver_Registro_Guardar()
{
    if(ui->pb_pant_test_Ver_Registro_Guardar->text()=="ver registro"){

        timer_graph.stop();
        timer_graph.setInterval(TIMER_TIMEOUT_ADC_READ);

        ver_registro_activated = true;

        QObject::connect(&timer_graph,SIGNAL(timeout()),this,SLOT(afterUpdateGraph()));

        QObject::connect(&timer_graph,SIGNAL(timeout()),this,SLOT(on_time_out_Ver_registro()));

        for(int i=0;i<4;i++){

            keyData_graph_HR_recorded[i] = i+1;
            valueData_graph_HR_recorded[i] = i+1;

        }

        customPlot_graph_Oxy1->graph(0)->data()->clear();
        customPlot_graph_Oxy1->xAxis->setRange(0,500);
        customPlot_graph_Oxy2->graph(0)->data()->clear();
        customPlot_graph_Oxy2->xAxis->setRange(0,500);
        customPlot_graph_EKG->graph(0)->data()->clear();
        customPlot_graph_EKG->xAxis->setRange(0,2000);

        timer_graph.start();
    }
    if(ui->pb_pant_test_Ver_Registro_Guardar->text() == "guardar"){
        if(QMessageBox::Ok==QMessageBox::question(this,"CONFIRMACIÓN","Desea guardar datos recibidos",QMessageBox::Ok,QMessageBox::No)){

            QFile *data_base= new QFile("base_datos_oximetria");

            if(data_base->open(QIODevice::Append))
            {

                QObject::disconnect(ftdi_serial_port,SIGNAL(readyRead()),this,SLOT(readSerial()));

                qDebug()<<data_base->fileName();

                QDataStream out(data_base);

                bebe_object.baby_name = "unknow";
                bebe_object.mother_name = ui->le_pant_paciente_Nombre->text();
                bebe_object.date = QDate::currentDate();
                bebe_object.time = QTime::currentTime();
                bebe_object.beats_per_minute_value_average_OXY1 = beats_per_minute_value_average_OXY1;
                bebe_object.beats_per_minute_value_average_OXY2 = beats_per_minute_value_average_OXY2;
                bebe_object.PI_value_average_OXY1 = PI_value_average_OXY1;
                bebe_object.PI_value_average_OXY2 = PI_value_average_OXY2;
                bebe_object.birth_date = QDate::currentDate();
                bebe_object.SPO2_bebe_value_average_OXY1 = SPO2_bebe_value_average_OXY1;
                bebe_object.SPO2_bebe_value_average_OXY2 = SPO2_bebe_value_average_OXY2;

                if(primera_vuelta ){

                    memcpy(&(bebe_object.function_0_data_bebe[0]), &function_values_graph_0[0], function_value_pos);
                    memcpy(&(bebe_object.function_1_data_bebe[0]), &function_values_graph_1[0], function_value_pos);
                    memcpy(&(bebe_object.HR_data_bebe[0]), &function_values_graph_HR[0], HR_value_pos);

                    bebe_object.data_function_size = function_value_pos;
                    bebe_object.data_adc_buffer_size = HR_value_pos;

                }else{
                    if(function_value_pos != DATA_FUNCTION_SIZE)
                        memcpy(bebe_object.function_0_data_bebe, &function_values_graph_0[function_value_pos], DATA_FUNCTION_SIZE - function_value_pos);
                    if(function_value_pos != 0)
                        memcpy(&(bebe_object.function_0_data_bebe[DATA_FUNCTION_SIZE - function_value_pos]), &function_values_graph_0[0], function_value_pos);

                    if(function_value_pos != DATA_FUNCTION_SIZE)
                        memcpy(bebe_object.function_1_data_bebe, &function_values_graph_1[function_value_pos], DATA_FUNCTION_SIZE - function_value_pos);
                    if(function_value_pos != 0)
                        memcpy(&(bebe_object.function_1_data_bebe[DATA_FUNCTION_SIZE - function_value_pos]), &function_values_graph_1[0], function_value_pos);

                    if(HR_value_pos != DATA_ADC_BUFFER_SIZE)
                        memcpy(bebe_object.HR_data_bebe, &function_values_graph_HR[HR_value_pos], DATA_ADC_BUFFER_SIZE - HR_value_pos);
                    if(HR_value_pos != 0)
                        memcpy(&(bebe_object.HR_data_bebe[DATA_ADC_BUFFER_SIZE - HR_value_pos]), &function_values_graph_HR[0], HR_value_pos);

                    bebe_object.data_function_size = DATA_FUNCTION_SIZE;
                    bebe_object.data_adc_buffer_size = DATA_ADC_BUFFER_SIZE;
                }


                bebe_object.write_file(out);

                QObject::connect(ftdi_serial_port,SIGNAL(readyRead()),this,SLOT(readSerial()));

                data_base->close();

                QMessageBox::information(this,"Informacion","Se ha guardado correctamente datos",QMessageBox::Ok);
            }
        }
    }
}

void MainWindow::on_pb_pant_test_ajustes(){

    show_pantalla_ajustes();
}

void MainWindow::on_pb_pant_test_atras()
{
    on_pb_pant_paciente_nuevo();
}


void MainWindow::on_pb_pant_ajustes_Generales()
{
    if(ui->widget_ajustes_generales_Generales->isHidden()){

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()+ui->widget_ajustes_generales_Generales->size().height());

        delta_y_constant_scrolling_ajustes -= ui->widget_ajustes_generales_Generales->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_Generales->show();
        ui->widget_ajustes_generales_Generales->move(ui->pb_pant_ajustes_generales_Generales->pos().x()+60,ui->pb_pant_ajustes_generales_Generales->pos().y()+50);

        ui->pb_pant_ajustes_generales_Visualizacion->move(ui->pb_pant_ajustes_generales_Visualizacion->pos().x(),
                                                          ui->pb_pant_ajustes_generales_Visualizacion->pos().y()+ui->widget_ajustes_generales_Generales->size().height());
        ui->pb_pant_ajustes_generales_ECG->move(ui->pb_pant_ajustes_generales_ECG->pos().x(),
                                                ui->pb_pant_ajustes_generales_ECG->pos().y()+ui->widget_ajustes_generales_Generales->size().height());
        ui->pb_pant_ajustes_generales_Oxymetria->move(ui->pb_pant_ajustes_generales_Oxymetria->pos().x(),
                                                      ui->pb_pant_ajustes_generales_Oxymetria->pos().y()+ui->widget_ajustes_generales_Generales->size().height());

        ui->widget_ajustes_generales_visualizacion->move(ui->widget_ajustes_generales_visualizacion->pos().x(),
                                                         ui->widget_ajustes_generales_visualizacion->pos().y()+ui->widget_ajustes_generales_Generales->size().height());
        ui->widget_ajustes_generales_ECG->move(ui->widget_ajustes_generales_ECG->pos().x(),
                                               ui->widget_ajustes_generales_ECG->pos().y()+ui->widget_ajustes_generales_Generales->size().height());
        ui->widget_ajustes_generales_Oximetria->move(ui->widget_ajustes_generales_Oximetria->pos().x(),
                                                     ui->widget_ajustes_generales_Oximetria->pos().y()+ui->widget_ajustes_generales_Generales->size().height());

        ui->l_pant_ajuste_barra_expansion_Generales->setFixedHeight(ui->l_pant_ajuste_barra_expansion_Generales->size().height()
                                                                    +ui->widget_ajustes_generales_Generales->size().height());
        ui->l_pant_ajuste_barra_expansion_Generales->move(ui->l_pant_ajuste_barra_expansion_Generales->pos().x(),
                                                          ui->pb_pant_ajustes_generales_Generales->pos().y()+30);

        ui->l_pant_ajuste_barra_expansion_Visualizacion->move(ui->l_pant_ajuste_barra_expansion_Visualizacion->pos().x(),
                                                              ui->l_pant_ajuste_barra_expansion_Visualizacion->pos().y()+ui->widget_ajustes_generales_Generales->size().height());

        ui->l_pant_ajuste_barra_expansion_ECG->move(ui->l_pant_ajuste_barra_expansion_ECG->pos().x(),
                                                    ui->l_pant_ajuste_barra_expansion_ECG->pos().y()+ui->widget_ajustes_generales_Generales->size().height());
    }
    else{

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()-ui->widget_ajustes_generales_Generales->size().height());

        ui->widget_pantalla_ajustes->move(0,0);

        delta_y_constant_scrolling_ajustes += ui->widget_ajustes_generales_Generales->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_Generales->hide();

        ui->pb_pant_ajustes_generales_Visualizacion->move(ui->pb_pant_ajustes_generales_Visualizacion->pos().x(),
                                                          ui->pb_pant_ajustes_generales_Visualizacion->pos().y()-ui->widget_ajustes_generales_Generales->size().height());
        ui->pb_pant_ajustes_generales_ECG->move(ui->pb_pant_ajustes_generales_ECG->pos().x(),
                                                ui->pb_pant_ajustes_generales_ECG->pos().y()-ui->widget_ajustes_generales_Generales->size().height());
        ui->pb_pant_ajustes_generales_Oxymetria->move(ui->pb_pant_ajustes_generales_Oxymetria->pos().x(),
                                                      ui->pb_pant_ajustes_generales_Oxymetria->pos().y()-ui->widget_ajustes_generales_Generales->size().height());

        ui->widget_ajustes_generales_visualizacion->move(ui->widget_ajustes_generales_visualizacion->pos().x(),
                                                         ui->widget_ajustes_generales_visualizacion->pos().y()-ui->widget_ajustes_generales_Generales->size().height());
        ui->widget_ajustes_generales_ECG->move(ui->widget_ajustes_generales_ECG->pos().x(),
                                               ui->widget_ajustes_generales_ECG->pos().y()-ui->widget_ajustes_generales_Generales->size().height());
        ui->widget_ajustes_generales_Oximetria->move(ui->widget_ajustes_generales_Oximetria->pos().x(),
                                                     ui->widget_ajustes_generales_Oximetria->pos().y()-ui->widget_ajustes_generales_Generales->size().height());

        ui->l_pant_ajuste_barra_expansion_Generales->setFixedHeight(57);
        ui->l_pant_ajuste_barra_expansion_Generales->move(ui->l_pant_ajuste_barra_expansion_Generales->pos().x(),
                                                          ui->pb_pant_ajustes_generales_Generales->pos().y()+30);

        ui->l_pant_ajuste_barra_expansion_Visualizacion->move(ui->l_pant_ajuste_barra_expansion_Visualizacion->pos().x(),
                                                              ui->l_pant_ajuste_barra_expansion_Visualizacion->pos().y()-ui->widget_ajustes_generales_Generales->size().height());

        ui->l_pant_ajuste_barra_expansion_ECG->move(ui->l_pant_ajuste_barra_expansion_ECG->pos().x(),
                                                    ui->l_pant_ajuste_barra_expansion_ECG->pos().y()-ui->widget_ajustes_generales_Generales->size().height());


    }
}

void MainWindow::on_pb_pant_ajustes_Visualizacion()
{
    if(ui->widget_ajustes_generales_visualizacion->isHidden()){

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()+ui->widget_ajustes_generales_visualizacion->size().height());

        delta_y_constant_scrolling_ajustes -= ui->widget_ajustes_generales_visualizacion->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_visualizacion->show();
        ui->widget_ajustes_generales_visualizacion->move(ui->pb_pant_ajustes_generales_Visualizacion->pos().x()+70,ui->pb_pant_ajustes_generales_Visualizacion->pos().y()+70);

        ui->pb_pant_ajustes_generales_ECG->move(ui->pb_pant_ajustes_generales_ECG->pos().x(),
                                                ui->pb_pant_ajustes_generales_ECG->pos().y()+ui->widget_ajustes_generales_visualizacion->size().height());
        ui->pb_pant_ajustes_generales_Oxymetria->move(ui->pb_pant_ajustes_generales_Oxymetria->pos().x(),
                                                      ui->pb_pant_ajustes_generales_Oxymetria->pos().y()+ui->widget_ajustes_generales_visualizacion->size().height());

        ui->widget_ajustes_generales_ECG->move(ui->widget_ajustes_generales_ECG->pos().x(),
                                               ui->widget_ajustes_generales_ECG->pos().y()+ui->widget_ajustes_generales_visualizacion->size().height());
        ui->widget_ajustes_generales_Oximetria->move(ui->widget_ajustes_generales_Oximetria->pos().x(),
                                                     ui->widget_ajustes_generales_Oximetria->pos().y()+ui->widget_ajustes_generales_visualizacion->size().height());

        ui->widget_pantalla_ajustes->move(ui->widget_pantalla_ajustes->pos().x(),-150);

        ui->l_pant_ajuste_barra_expansion_Visualizacion->setFixedHeight(ui->l_pant_ajuste_barra_expansion_Visualizacion->size().height()
                                                                        +ui->widget_ajustes_generales_visualizacion->size().height());
        ui->l_pant_ajuste_barra_expansion_Visualizacion->move(ui->l_pant_ajuste_barra_expansion_Visualizacion->pos().x(),
                                                              ui->pb_pant_ajustes_generales_Visualizacion->pos().y()+45);
        ui->l_pant_ajuste_barra_expansion_ECG->move(ui->l_pant_ajuste_barra_expansion_ECG->pos().x(),
                                                    ui->l_pant_ajuste_barra_expansion_ECG->pos().y()+ui->widget_ajustes_generales_visualizacion->size().height());
    }
    else{

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()-ui->widget_ajustes_generales_visualizacion->size().height());

        ui->widget_pantalla_ajustes->move(0,0);

        delta_y_constant_scrolling_ajustes += ui->widget_ajustes_generales_visualizacion->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_visualizacion->hide();

        ui->pb_pant_ajustes_generales_ECG->move(ui->pb_pant_ajustes_generales_ECG->pos().x(),
                                                ui->pb_pant_ajustes_generales_ECG->pos().y()-ui->widget_ajustes_generales_visualizacion->size().height());
        ui->pb_pant_ajustes_generales_Oxymetria->move(ui->pb_pant_ajustes_generales_Oxymetria->pos().x(),
                                                      ui->pb_pant_ajustes_generales_Oxymetria->pos().y()-ui->widget_ajustes_generales_visualizacion->size().height());

        ui->widget_ajustes_generales_ECG->move(ui->widget_ajustes_generales_ECG->pos().x(),
                                               ui->widget_ajustes_generales_ECG->pos().y()-ui->widget_ajustes_generales_visualizacion->size().height());
        ui->widget_ajustes_generales_Oximetria->move(ui->widget_ajustes_generales_Oximetria->pos().x(),
                                                     ui->widget_ajustes_generales_Oximetria->pos().y()-ui->widget_ajustes_generales_visualizacion->size().height());

        ui->l_pant_ajuste_barra_expansion_Visualizacion->setFixedHeight(64);
        ui->l_pant_ajuste_barra_expansion_Visualizacion->move(ui->l_pant_ajuste_barra_expansion_Visualizacion->pos().x(),
                                                              ui->pb_pant_ajustes_generales_Visualizacion->pos().y()+45);

        ui->l_pant_ajuste_barra_expansion_ECG->move(ui->l_pant_ajuste_barra_expansion_ECG->pos().x(),
                                                    ui->l_pant_ajuste_barra_expansion_ECG->pos().y()-ui->widget_ajustes_generales_visualizacion->size().height());

    }
}

void MainWindow::on_pb_pant_ajustes_ECG()
{
    if(ui->widget_ajustes_generales_ECG->isHidden()){

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()+ui->widget_ajustes_generales_ECG->size().height());

        delta_y_constant_scrolling_ajustes -= ui->widget_ajustes_generales_ECG->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_ECG->show();
        ui->widget_ajustes_generales_ECG->move(ui->pb_pant_ajustes_generales_ECG->pos().x()+70,ui->pb_pant_ajustes_generales_ECG->pos().y()+60);

        ui->pb_pant_ajustes_generales_Oxymetria->move(ui->pb_pant_ajustes_generales_Oxymetria->pos().x(),
                                                      ui->pb_pant_ajustes_generales_Oxymetria->pos().y()+ui->widget_ajustes_generales_ECG->size().height());

        ui->widget_ajustes_generales_Oximetria->move(ui->widget_ajustes_generales_Oximetria->pos().x(),
                                                     ui->widget_ajustes_generales_Oximetria->pos().y()+ui->widget_ajustes_generales_ECG->size().height());

        ui->widget_pantalla_ajustes->move(ui->widget_pantalla_ajustes->pos().x(),-250);

        ui->l_pant_ajuste_barra_expansion_ECG->setFixedHeight(ui->l_pant_ajuste_barra_expansion_ECG->size().height()
                                                              +ui->widget_ajustes_generales_ECG->size().height());
        ui->l_pant_ajuste_barra_expansion_ECG->move(ui->l_pant_ajuste_barra_expansion_ECG->pos().x(),
                                                    ui->pb_pant_ajustes_generales_ECG->pos().y()+46);

    }
    else{

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()-ui->widget_ajustes_generales_ECG->size().height());

        ui->widget_pantalla_ajustes->move(0,0);

        delta_y_constant_scrolling_ajustes += ui->widget_ajustes_generales_ECG->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_ECG->hide();

        ui->pb_pant_ajustes_generales_Oxymetria->move(ui->pb_pant_ajustes_generales_Oxymetria->pos().x(),
                                                      ui->pb_pant_ajustes_generales_Oxymetria->pos().y()-ui->widget_ajustes_generales_ECG->size().height());

        ui->widget_ajustes_generales_Oximetria->move(ui->widget_ajustes_generales_Oximetria->pos().x(),
                                                     ui->widget_ajustes_generales_Oximetria->pos().y()-ui->widget_ajustes_generales_ECG->size().height());

        ui->l_pant_ajuste_barra_expansion_ECG->setFixedHeight(59);
        ui->l_pant_ajuste_barra_expansion_ECG->move(ui->l_pant_ajuste_barra_expansion_ECG->pos().x(),
                                                    ui->pb_pant_ajustes_generales_ECG->pos().y()+46);

    }
}

void MainWindow::on_pb_pant_ajustes_Oxymetria()
{
    if(ui->widget_ajustes_generales_Oximetria->isHidden()){

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()+ui->widget_ajustes_generales_Oximetria->size().height());

        delta_y_constant_scrolling_ajustes -= ui->widget_ajustes_generales_Oximetria->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_Oximetria->show();
        ui->widget_ajustes_generales_Oximetria->move(ui->pb_pant_ajustes_generales_Oxymetria->pos().x()+70,ui->pb_pant_ajustes_generales_Oxymetria->pos().y()+60);

        ui->widget_pantalla_ajustes->move(ui->widget_pantalla_ajustes->pos().x(),-210);
    }
    else{

        ui->widget_pantalla_ajustes->setFixedHeight(ui->widget_pantalla_ajustes->size().height()-ui->widget_ajustes_generales_Oximetria->size().height());

        ui->widget_pantalla_ajustes->move(0,0);

        delta_y_constant_scrolling_ajustes += ui->widget_ajustes_generales_Oximetria->size().height();

        ui->statusBar->showMessage(QString::number(delta_y_constant_scrolling_ajustes));

        ui->widget_ajustes_generales_Oximetria->hide();
    }
}

void MainWindow::on_pb_widget_colores_aceptar_ECG_Curva()
{
    ui->statusBar->showMessage("aceptar");
    //customPlot_graph_EKG->graph(0)->setPen(QPen(ui->pb_widget_ajustes_generales_color_EKG_curva->palette().color(QPalette::Background)));  //azul claro

    ui->widget_pantalla_ajustes_widget_colores->hide();
    customPlot_graph_EKG->graph(0)->setPen(QPen(ui->l_widget_colores_color_seleccionado->palette().color(QPalette::Background)));
    ui->pb_widget_ajustes_generales_color_EKG_curva->setStyleSheet(ui->l_widget_colores_color_seleccionado->styleSheet());
}

void MainWindow::on_pb_widget_colores_aceptar_ECG_fondo()
{
    ui->statusBar->showMessage("aceptar");
    //customPlot_graph_EKG->graph(0)->setPen(QPen(ui->pb_widget_ajustes_generales_color_EKG_curva->palette().color(QPalette::Background)));  //azul claro

    ui->widget_pantalla_ajustes_widget_colores->hide();
    customPlot_graph_EKG->setBackground(QBrush(ui->l_widget_colores_color_seleccionado->palette().color(QPalette::Background)));
    ui->pb_widget_ajustes_generales_color_EKG_fondo->setStyleSheet(ui->l_widget_colores_color_seleccionado->styleSheet());
}

void MainWindow::on_pb_widget_colores_aceptar_Oxy1_Curva()
{
    ui->statusBar->showMessage("aceptar");
    //customPlot_graph_EKG->graph(0)->setPen(QPen(ui->pb_widget_ajustes_generales_color_EKG_curva->palette().color(QPalette::Background)));  //azul claro

    ui->widget_pantalla_ajustes_widget_colores->hide();
    customPlot_graph_Oxy1->graph(0)->setPen(QPen(ui->l_widget_colores_color_seleccionado->palette().color(QPalette::Background)));
    ui->pb_widget_ajustes_generales_color_Oxy1_curva->setStyleSheet(ui->l_widget_colores_color_seleccionado->styleSheet());
}

void MainWindow::on_pb_widget_colores_aceptar_Oxy1_fondo()
{
    ui->statusBar->showMessage("aceptar");
    //customPlot_graph_EKG->graph(0)->setPen(QPen(ui->pb_widget_ajustes_generales_color_EKG_curva->palette().color(QPalette::Background)));  //azul claro

    ui->widget_pantalla_ajustes_widget_colores->hide();
    customPlot_graph_Oxy1->setBackground(QBrush(ui->l_widget_colores_color_seleccionado->palette().color(QPalette::Background)));
    ui->pb_widget_ajustes_generales_color_Oxy1_fondo->setStyleSheet(ui->l_widget_colores_color_seleccionado->styleSheet());
}

void MainWindow::on_pb_widget_colores_aceptar_Oxy2_Curva()
{
    ui->statusBar->showMessage("aceptar");
    //customPlot_graph_EKG->graph(0)->setPen(QPen(ui->pb_widget_ajustes_generales_color_EKG_curva->palette().color(QPalette::Background)));  //azul claro

    ui->widget_pantalla_ajustes_widget_colores->hide();
    customPlot_graph_Oxy2->graph(0)->setPen(QPen(ui->l_widget_colores_color_seleccionado->palette().color(QPalette::Background)));
    ui->pb_widget_ajustes_generales_color_Oxy2_curva->setStyleSheet(ui->l_widget_colores_color_seleccionado->styleSheet());
}

void MainWindow::on_pb_widget_colores_aceptar_Oxy2_fondo()
{
    ui->statusBar->showMessage("aceptar");
    //customPlot_graph_EKG->graph(0)->setPen(QPen(ui->pb_widget_ajustes_generales_color_EKG_curva->palette().color(QPalette::Background)));  //azul claro

    ui->widget_pantalla_ajustes_widget_colores->hide();
    customPlot_graph_Oxy2->setBackground(QBrush(ui->l_widget_colores_color_seleccionado->palette().color(QPalette::Background)));
    ui->pb_widget_ajustes_generales_color_Oxy2_fondo->setStyleSheet(ui->l_widget_colores_color_seleccionado->styleSheet());
}

void MainWindow::on_pb_widget_colores_cancelar()
{
    ui->statusBar->showMessage("cancelar");

    ui->widget_pantalla_ajustes_widget_colores->hide();
}

void MainWindow::on_pb_widget_colores_amarillo()
{
    ui->statusBar->showMessage("amarillo");

    ui->l_widget_colores_color_seleccionado->setStyleSheet(ui->pb_widget_colores_amarillo->styleSheet());
}

void MainWindow::on_pb_widget_colores_azul()
{
    ui->statusBar->showMessage("azul");

    ui->l_widget_colores_color_seleccionado->setStyleSheet(ui->pb_widget_colores_azul->styleSheet());
}

void MainWindow::on_pb_widget_colores_naranja()
{
    ui->statusBar->showMessage("naranja");

    ui->l_widget_colores_color_seleccionado->setStyleSheet(ui->pb_widget_colores_naranja->styleSheet());
}

void MainWindow::on_pb_widget_colores_verde()
{
    ui->statusBar->showMessage("verde");

    ui->l_widget_colores_color_seleccionado->setStyleSheet(ui->pb_widget_colores_verde->styleSheet());
}

void MainWindow::on_pb_widget_colores_rojo()
{
    ui->statusBar->showMessage("rojo");

    ui->l_widget_colores_color_seleccionado->setStyleSheet(ui->pb_widget_colores_rojo->styleSheet());
}

void MainWindow::on_pb_widget_ajustes_generales_color_ECG_Curva()
{
    ui->statusBar->showMessage("Color");

    ui->widget_pantalla_ajustes_widget_colores->show();
    ui->widget_pantalla_ajustes_widget_colores->move(600,360);
    ui->pb_widget_colores_aceptar_ECG_Curva->raise();
}

void MainWindow::on_pb_widget_ajustes_generales_color_ECG_fondo()
{
    ui->statusBar->showMessage("Color");

    ui->widget_pantalla_ajustes_widget_colores->show();
    ui->widget_pantalla_ajustes_widget_colores->move(600,360);
    ui->pb_widget_colores_aceptar_ECG_fondo->raise();
}

void MainWindow::on_pb_widget_ajustes_generales_color_Oxy1_Curva()
{
    ui->statusBar->showMessage("Color");

    ui->widget_pantalla_ajustes_widget_colores->show();
    ui->widget_pantalla_ajustes_widget_colores->move(600,360);
    ui->pb_widget_colores_aceptar_Oxy1_Curva->raise();
}
void MainWindow::on_pb_widget_ajustes_generales_color_Oxy1_fondo()
{
    ui->statusBar->showMessage("Color");

    ui->widget_pantalla_ajustes_widget_colores->show();
    ui->widget_pantalla_ajustes_widget_colores->move(600,360);
    ui->pb_widget_colores_aceptar_Oxy1_fondo->raise();
}
void MainWindow::on_pb_widget_ajustes_generales_color_Oxy2_Curva()
{
    ui->statusBar->showMessage("Color");

    ui->widget_pantalla_ajustes_widget_colores->show();
    ui->widget_pantalla_ajustes_widget_colores->move(600,360);
    ui-> pb_widget_colores_aceptar_Oxy2_Curva->raise();
}
void MainWindow::on_pb_widget_ajustes_generales_color_Oxy2_fondo()
{
    ui->statusBar->showMessage("Color");

    ui->widget_pantalla_ajustes_widget_colores->show();
    ui->widget_pantalla_ajustes_widget_colores->move(600,360);
    ui-> pb_widget_colores_aceptar_Oxy2_fondo->raise();
}

uint32_t MainWindow::crc32(const void *buf, size_t size)
{
    const uint8_t *p = (uint8_t *)buf;
    uint32_t crc;

    crc = ~0U;
    while (size--)
        crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
    return crc ^ ~0U;
}

void MainWindow::check_message(qint64 bytes_size)
{
    if(last_bad_receive_pos >= UART_SEND_TOTAL_SIZE){

        uint8_t buf_8b[4];
        uint32_t crcValue = crc32(receive_bytes, UART_SEND_BUFFER_SIZE);

        for (int i=0; i<4 ;++i){
            buf_8b[i] = ((uint8_t*)&crcValue)[3-i];
        }

        valid_receive_data = true;

        for (int i=0; i<4 ;++i){
            if(receive_bytes[i+UART_SEND_BUFFER_SIZE] != buf_8b[i]){
                valid_receive_data = false;//Error de datos solicitar reenvio

                QObject::disconnect(ftdi_serial_port,SIGNAL(readyRead()),this,SLOT(readSerial()));
                ftdi_serial_port->close();

                char write_data[16];
                for (int i=0; i<16;++i){
                    write_data[i]=0x0F;
                }

                ftdi_serial_port->open(QSerialPort::ReadWrite);
                last_bad_receive_pos=0;
                errores++;
                QObject::connect(ftdi_serial_port,SIGNAL(readyRead()),this,SLOT(readSerial()));

                ftdi_serial_port->write(write_data,16);

                ui->statusBar->showMessage(QString::number(errores));
                return;//Error de check_sum solicitar reenvio
            }
        }

        for(int i=HEADER_START_POS; i < HEADER_SIZE; i++){
            if(receive_bytes[i] != HEADER_ID){
                valid_receive_data = false;//Error de datos solicitar reenvio

                QObject::disconnect(ftdi_serial_port,SIGNAL(readyRead()),this,SLOT(readSerial()));
                ftdi_serial_port->close();

                char write_data[16];
                for (int i=0; i<16;++i){
                    write_data[i]=0x0F;
                }

                ftdi_serial_port->open(QSerialPort::ReadWrite);
                last_bad_receive_pos=0;
                errores++;
                QObject::connect(ftdi_serial_port,SIGNAL(readyRead()),this,SLOT(readSerial()));


                ui->statusBar->showMessage(QString::number(errores));
                ftdi_serial_port->write(write_data,16);
                return;//Error de cabecera solicitar reenvio
            }
        }
    }
}

bool MainWindow::cargar_base_de_datos(QString database_name)
{
    ui->lw_pant_base_de_datos_pacientes->clear();
    QFile *data_base = new QFile(database_name); // ficheros .dat se puede utilizar formato txt tambien


    if(data_base->open(QIODevice::ReadOnly))
    {
        QDataStream in(data_base);

        while(!data_base->atEnd()){

            bebe_object.read_file(in);

            //             if(!name_list_mothers.contains(bebe_object.mother_name, Qt::CaseInsensitive)){

            //                 name_list_mothers.append(bebe_object.mother_name);
            //             }
            //             if(!name_list_babies.contains(bebe_object.baby_name, Qt::CaseInsensitive)){

            //                 name_list_babies.append(bebe_object.baby_name);
            //             }
            ui->lw_pant_base_de_datos_pacientes->addItem(QString::number(bebe_object.ID));
        }

        data_base->close();
    }
    else{
        QMessageBox::information(this,"Informacion","No se ha podido cargar la base de datos   ",QMessageBox::Ok);
    }
}

QString MainWindow::ordenar_para_list_widget(QString datos_a_ordenar)
{
    QString n;
    return n;
}


void MainWindow::setupGraph_Oxy1(){   //OXYmetro 1

    customPlot_graph_Oxy1 = (QCustomPlot *)ui->widget_oxy_graph_1;

    QVector<double> time_x_axis(100),concentration_y_axis(100);

    for(int i=0; i< 100; i++){
        time_x_axis[i]=0;
        concentration_y_axis[i]=0;

    }

    customPlot_graph_Oxy1->addGraph();
    customPlot_graph_Oxy1->graph(0)->setData(time_x_axis,concentration_y_axis);

    customPlot_graph_Oxy1->xAxis->setRange(0,500);
    customPlot_graph_Oxy1->yAxis->setRange(0,100);

    customPlot_graph_Oxy1->xAxis->setVisible(false);
    customPlot_graph_Oxy1->yAxis->setVisible(false);

    customPlot_graph_Oxy1->xAxis->setTickLabelRotation(60);

    customPlot_graph_Oxy1->xAxis->setTickLength(0, 4);


    // Configuracion de graficas------------------------------------------------------------------------------------------------
    customPlot_graph_Oxy1->setAutoFillBackground(true);
    //------------------------------------------------------------------------------------------------------------------------

    customPlot_graph_Oxy1->graph(0)->setName("customPlot");
    //customPlot_graph_Oxy1->graph(0)->setPen(QPen(QColor(80, 80, 80))); //gris oscuro
    customPlot_graph_Oxy1->graph(0)->setPen(QPen(QColor(0, 200, 255)));  //azul claro
    //customPlot_graph_Oxy1->setBackground(QBrush(QColor("#e8e8e8"))); //gris de diseño
    customPlot_graph_Oxy1->setBackground(QBrush(QColor(Qt::black)));
    // customPlot_graph_Oxy1->graph(0)->setBrush(QColor(0, 168, 140));

    customPlot_graph_Oxy1->setFixedSize(728, 124);
    customPlot_graph_Oxy1->move(205,618);

    customPlot_graph_Oxy1->replot();

}

void MainWindow::setupGraph_Oxy2()
{

    customPlot_graph_Oxy2 = (QCustomPlot *)ui->widget_oxy_graph_2;

    QVector<double> time_x_axis(100),concentration_y_axis(100);

    for(int i=0; i< 100; i++){
        time_x_axis[i]=0;
        concentration_y_axis[i]=0;

    }

    customPlot_graph_Oxy2->addGraph();
    customPlot_graph_Oxy2->graph(0)->setData(time_x_axis,concentration_y_axis);

    customPlot_graph_Oxy2->xAxis->setRange(0,500);
    customPlot_graph_Oxy2->yAxis->setRange(0,100);

    customPlot_graph_Oxy2->xAxis->setVisible(false);
    customPlot_graph_Oxy2->yAxis->setVisible(false);

    customPlot_graph_Oxy2->xAxis->setTickLabelRotation(60);

    customPlot_graph_Oxy2->xAxis->setTickLength(0, 4);

    // Configuracion de graficas------------------------------------------------------------------------------------------------
    customPlot_graph_Oxy2->setBackground(QBrush(QColor(236,239,241)));
    customPlot_graph_Oxy2->setAutoFillBackground(true);
    customPlot_graph_Oxy2->setFixedSize(QSize(560,300));

    customPlot_graph_Oxy2->move(720,410);
    //------------------------------------------------------------------------------------------------------------------------

    customPlot_graph_Oxy2->graph(0)->setName("Oxy2");
    //customPlot_graph_Oxy2->graph(0)->setPen(QPen(QColor(179, 179, 179).lighter(10)));
    customPlot_graph_Oxy2->graph(0)->setPen(QPen(QColor(0, 200, 255)));  //azul
    //customPlot_graph_Oxy2->setBackground(QBrush(QColor("#e8e8e8"))); //gris de diseño
    customPlot_graph_Oxy2->setBackground(QBrush(QColor(Qt::black)));
    customPlot_graph_Oxy2->replot();

    customPlot_graph_Oxy2->setFixedSize(728, 124);
    customPlot_graph_Oxy2->move(205,758);
}

void MainWindow::setupGraph_EKG()
{


    customPlot_graph_EKG = (QCustomPlot *)ui->widget_ekg_graph;

    QVector<double> time_x_axis(100),concentration_y_axis(100);

    for(int i=0; i< 100; i++){
        time_x_axis[i]=0;
        concentration_y_axis[i]=0;

    }

    customPlot_graph_EKG->addGraph();
    customPlot_graph_EKG->graph(0)->setData(time_x_axis,concentration_y_axis);

    customPlot_graph_EKG->xAxis->setRange(0,2000);
    customPlot_graph_EKG->yAxis->setRange(0,270);

    customPlot_graph_EKG->xAxis->setVisible(false);
    customPlot_graph_EKG->yAxis->setVisible(false);

    customPlot_graph_EKG->xAxis->setTickLabelRotation(60);

    customPlot_graph_EKG->xAxis->setTickLength(0, 4);


    // Configuracion de graficas------------------------------------------------------------------------------------------------
    customPlot_graph_EKG->setAutoFillBackground(true);
    //------------------------------------------------------------------------------------------------------------------------

    customPlot_graph_EKG->graph(0)->setName("customPlot");
    //customPlot_graph_EKG->graph(0)->setPen(QPen(QColor(241, 90, 36)));
    customPlot_graph_EKG->graph(0)->setPen(QPen(QColor(0, 255, 0))); //verde
    //customPlot_graph_EKG->setBackground(QBrush(QColor("#e8e8e8"))); //gris de diseño
    customPlot_graph_EKG->setBackground(QBrush(QColor(Qt::black)));
    // customPlot_graph_Oxy1->graph(0)->setBrush(QColor(0, 168, 140));

    customPlot_graph_EKG->setFixedSize(728, 124);
    customPlot_graph_EKG->move(205,479);

    customPlot_graph_EKG->replot();

}

void MainWindow::show_widget_paciente_datos(){

    ui->widget_paciente_datos->show();
    ui->widget_paciente_datos->move(this->pos().x()+300,this->pos().y()+40);
}

void MainWindow::show_pantalla_paciente(){

    hide_all();
    this->setGeometry(0,0,1280,800);
    ui->widget_pantalla_paciente->show();
    ui->widget_pantalla_paciente->move(0,0);
}
void MainWindow::show_pantalla_test(){

    hide_all();
    this->setFixedSize(1280,1042);
    //    ui->widget_scrollArea_test->show();
    //    ui->widget_scrollArea_test->move(0,0);

    QObject::disconnect(&start_moving_screen,SIGNAL(timeout()),this,SLOT(on_start_scrolling_screen_ajustes_timeout()));
    QObject::connect(&start_moving_screen,SIGNAL(timeout()),this,SLOT(on_start_moving_screen_timeout()));

    ui->widget_pantalla_test->show();
    ui->widget_pantalla_test->move(0,0);
}
void MainWindow::show_pantalla_base_de_datos(){

    hide_all();
    this->setGeometry(0,0,1280,800);
    ui->widget_pant_base_de_Datos->show();
    ui->widget_pant_base_de_Datos->move(0,0);
}

void MainWindow::show_pantalla_ajustes(){

    hide_all();
    this->setFixedSize(1280,800);

    QObject::disconnect(&start_moving_screen,SIGNAL(timeout()),this,SLOT(on_start_moving_screen_timeout()));
    QObject::connect(&start_moving_screen,SIGNAL(timeout()),this,SLOT(on_start_scrolling_screen_ajustes_timeout()));

    ui->widget_pantalla_ajustes->show();
    ui->widget_pantalla_ajustes->move(0,0);
    ui->widget_pantalla_ajustes->setFixedSize(1280,800);
    delta_y_constant_scrolling_ajustes =0;

    ui->pb_pant_ajustes_generales_Generales->move(210,460);
    ui->pb_pant_ajustes_generales_Visualizacion->move(211,515);
    ui->pb_pant_ajustes_generales_ECG->move(210,594);
    ui->pb_pant_ajustes_generales_Oxymetria->move(210,669);

    ui->widget_ajustes_generales_Generales->hide();
    ui->widget_ajustes_generales_visualizacion->hide();
    ui->widget_ajustes_generales_ECG->hide();
    ui->widget_ajustes_generales_Oximetria->hide();

    ui->l_pant_ajuste_barra_expansion_Generales->setFixedHeight(57);
    ui->l_pant_ajuste_barra_expansion_Generales->move(ui->l_pant_ajuste_barra_expansion_Generales->pos().x(),
                                                      ui->pb_pant_ajustes_generales_Generales->pos().y()+30);

    ui->l_pant_ajuste_barra_expansion_Visualizacion->setFixedHeight(64);
    ui->l_pant_ajuste_barra_expansion_Visualizacion->move(ui->l_pant_ajuste_barra_expansion_Visualizacion->pos().x(),
                                                          ui->pb_pant_ajustes_generales_Visualizacion->pos().y()+45);

    ui->l_pant_ajuste_barra_expansion_ECG->setFixedHeight(59);
    ui->l_pant_ajuste_barra_expansion_ECG->move(ui->l_pant_ajuste_barra_expansion_ECG->pos().x(),
                                                ui->pb_pant_ajustes_generales_ECG->pos().y()+46);

    ui->pb_widget_ajustes_generales_caneles_0->hide();
    ui->pb_widget_ajustes_generales_caneles_1->hide();
    ui->pb_widget_ajustes_generales_caneles_2->hide();
}


void MainWindow::hide_all(){

    connect(&start_moving_screen,SIGNAL(timeout()),this,SLOT(on_start_moving_screen_timeout()));
    ui->widget_pantalla_paciente->hide();
    //ui->widget_scrollArea_test->hide();
    ui->widget_pantalla_test->hide();
    ui->widget_pant_base_de_Datos->hide();
    ui->widget_borrar_paciente->hide();
    ui->widget_paciente_datos->hide();
    ui->widget_proseguir_test_paciente->hide();
    ui->widget_menu->hide();
    ui->widget_pantalla_ajustes->hide();
    ui->widget_pantalla_ajustes_widget_colores->hide();
}

void MainWindow::on_pb_widget_paciente_datos_Nuevo_Test()
{
    ui->pb_pant_test_Graficar_Iniciar->setText("graficar");
    ui->pb_pant_test_Ver_Registro_Guardar->setText("guardar");
    show_pantalla_test();
}

void MainWindow::on_pb_widget_paciente_datos_Ver_Registro()
{
    ui->pb_pant_test_Graficar_Iniciar->setText("resultados");
    ui->pb_pant_test_Ver_Registro_Guardar->setText("ver registro");
    show_pantalla_test();
}

void MainWindow::on_lw_pant_base_de_datos_pacientes_itemClicked(QListWidgetItem *item)
{
    ui->l_widget_paciente_datos_ID->setText(item->text());
    show_widget_paciente_datos();
}
